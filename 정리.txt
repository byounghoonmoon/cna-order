
netstat -ano |findstr PID :808

taskkill /pid 18264 /f


@PostPersist	: 저장 후
@PrePersist		: 저장 전

@PostUpdate		: 수정 후
@PreUpdate		: 수정 전

@PostRemove		: 삭제 후
@PreRemove		: 삭제 전

카프카 
	<!-- kafka streams -->
	<dependency>
		<groupId>org.springframework.cloud</groupId>
		<artifactId>spring-cloud-starter-stream-kafka</artifactId>
	</dependency>
	<dependency>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-actuator</artifactId>
	</dependency>
	
	이벤트 수신 
	kafka-console-consumer.bat --bootstrap-server http://localhost:9092 --topic 토픽설정명 --from-beginning


주황색 스티커 (Event) : 과거분사형 ex:주문됨
					  주문됨의 경우 post persist (pre로 하면 id가 null)
					  주문삭제됨의 경우 pre remove (post로 하면 id가 null)
					  
파란색 스티커 (command) : 동사


DockerDesktop

https://kcloud-academy.signin.aws.amazon.com/console
user14 / skccadmin1234!
ap-southeast-1

0. AWS 계정 관련 
   IAM - User

1. Ubuntu 환경 잡기 
	1) aws configure 명령어 실행
		AWS Access Key ID : Acess Key 입력
		AWS Secret Access Key : 비밀 키 입력 
		Default region name [ap-southeast-1]: ap-southeast-1
		Default output format [json]: json
	2) ekctl, kubectl, docker 전부 설치해야함 

2. 클러스터 생성 
   eksctl create cluster --name user14-cluster --version 1.15 --nodegroup-name standard-workers --node-type t3.medium --nodes 3 --nodes-min 1 --nodes-max 3
   
3. ECR 생성 
	52937454741.dkr.ecr.us-east-2.amazonaws.com/user14-cna-order
	이미지 스캔 활성화 체크 (푸시되면 자동으로 스캔)
	
4. Docker Image 만들기 
    0) 사전에 mvn package ㄱㄱ
	1) docker build -t 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-order .
	2) docker images 도커이미지 확인
	
5. aws ECR 로그인 	
	aws ecr get-login-password --region ap-southeast-1 | docker login --username AWS --password-stdin 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com

6. Docker Push 
	docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-order:latest
	docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-delivery:latest
	docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-mypage:latest
	docker push 052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-gateway:latest

7. Kubectl 컨테이너 생성
   1) 각 application 에서 deployment.yml 및 service.yml 수정 필요 (namespace 등록 및 image 경로 수정)
   2) kubectl create deployment.yml 수행 (각 어플리케이션 하위에 있는 deployment.yml 로 수행)

8. 카프카 확인 
kubectl -n kafka exec -ti my-kafka-0 -- /usr/bin/kafka-console-consumer --bootstrap-server my-kafka:9092 --topic demo --from-beginning

9. httpie 설치 

cat <<EOF | kubectl apply -f -
apiVersion: "v1"
kind: "Pod"
metadata: 
  name: httpie
  namespace: istio-cb-ns
  labels: 
    name: httpie
spec: 
  containers: 
    - 
      name: httpie
      image: clue/httpie
      command:
        - sleep
        - "36000"
EOF

10. httpi 들어가서 수행 
    kubectl exec -ti pod/httpie -n istio-cb-ns -c httpie -- /bin/sh
	http POST http://order:8080/orders productId="1002" qty="10"
	Kafka 확인 
	
11. DR Rule 적용 

	kubectl apply -f - <<EOF
	apiVersion: networking.istio.io/v1alpha3
	kind: DestinationRule
	metadata:
	name: dr-delivery
	namespace: istio-cb-ns
	spec:
	host: delivery
	trafficPolicy:
		connectionPool:
		http:
			http1MaxPendingRequests: 5
			maxRequestsPerConnection: 10
		outlierDetection:
		interval: 1s
		consecutiveErrors: 1
		baseEjectionTime: 3m
		maxEjectionPercent: 100
	EOF

12. gate way 올리기 
	kubectl create deploy cna-gateway --image=052937454741.dkr.ecr.ap-southeast-1.amazonaws.com/user14-cna-gateway:latest -n istio-cb-ns
13. GateWay만 Expose 	
	kubectl expose deploy cna-gateway --type=LoadBalancer --port=8080 -n istio-cb-ns

14. 외부로 해보기 



##### 한번에 모든 도커 이미지 지우기
docker image rm $(docker images -q) 

### 테스트 URL 
http POST http://localhost:8081/orders productId="1001" qty="10"
http POST http://localhost:8081/orders productId="1002" qty="20"
http POST http://localhost:8081/orders productId="1003" qty="30"

http GET http://localhost:8081/orders
http GET http://localhost:8082/deliveries
http GET http://localhost:8082/cancelations
http GET http://localhost:8083/myPages


http PATCH http://localhost:8081/orders
http PATCH http://localhost:8082/deliveries/1 status="Delivery Cancel"

http POST http://order:8080/orders productId="1001" qty="10"


http DELETE  http://localhost:8081/orders/1

## kubectl 서비스 죽이기
kubectl delete deploy,svc,pods --all

##
kubectl exec -it [복사된 pod 이름] -n [네임스페이스명] -- /bin/bash


## kubectl 작업공간 생성
kubectl create namespace istio-cb-ns

## replica 숫자 변경
kubectl -n istio-cb-ns scale deploy delivery --replicas=3





########## 로그 보기 
kubectl logs -f hello-server-2 -c hello-server-2 -n istio-cb-ns
(-c: container target)
(어떤 컨테이너 로그볼래 ? 2번)

deployment.yml 고쳐줘야함 (namespace 명 및, image 경로)
service.yml 또한 namespace 입력 필요

### 서비스 올리기
kubectl create -f deployment.yml

kubectl logs {pod명} -c {컨테이너명} -n {네임스페이스명}
kubectl logs pod/order-687b8c58b-tnvxv -c order -n istio-cb-ns
kubectl logs pod/delivery-77b65d8498-4rwst -c delivery -n istio-cb-ns










































	
